<?php if(!defined('BASEPATH')){if(!headers_sent()){header('HTTP/1.1 404 Not Found',T,404);}exit('No direct script access allowed');}defined('F')||define('F',false);defined('T')||define('T',true);class Template_Base{protected static $subdir='',$prefix='';protected $valid_name='[a-zA-Z_][a-zA-Z0-9_]*';protected function is_varname($varname){if(!is_string($varname)||!preg_match('/^'.$this->valid_name.'$/',$varname)){return F;}return T;}public function view_exists($view){if(!is_string($view)){return F;}$file='views/'.self::$subdir.self::$prefix.$view.EXT;$file=defined('MODBASE')?MODBASE.$this->CI->uri->segment(2).'/'.$file:APPPATH.$file;return file_exists($file);}protected function view_path($view){if(!$this->view_exists($view)){return F;}$file='/views/'.self::$subdir.self::$prefix.$view.EXT;$file=defined('MODBASE')?MODBASE.$this->CI->uri->segment(2).'/'.$file:APPPATH.$file;return realpath($file);}public function set_dir($dir){if(!is_string($dir)){return F;}$dir=trim($dir,'/');$path=APPPATH.'/views/'.$dir;if(!is_dir($path)){return F;}self::$subdir=$dir;return T;}public function set_prefix($prefix){if(!$this->is_varname($prefix)){return F;}self::$prefix=$prefix;return T;}protected function load_view($view,$vars=array(),$return=T){if(!is_string($view)||!$this->view_exists($view)){return F;}${'1view'}=$this->view_path($view);${'1return'}=$return;unset($view,$return);extract($vars,EXTR_OVERWRITE);ob_start();include ${'1view'};log_message('debug','File loaded (as view): '.${'1view'});$output=ob_get_contents();ob_end_clean();if(${'1return'}){return $output;}echo $output;}}class Template extends Template_Base{protected $links=array(),$sections=array(),$active=F,$autolink=T,$propagate=F,$section_class='Template_Section';public $CI;public function __construct($params=F){log_message('debug','Template Class Initialized');$this->CI=&get_instance();if(is_array($params)){if(isset($params['config'])){$this->autoload($params['config']);}if(isset($params['subdir'])){$this->set_dir($params['subdir']);}if(isset($params['prefix'])){$this->set_prefix($params['prefix']);}if(isset($params['autolink'])){$this->autolink($params['autolink']);}}}public function section_exists($section){if(is_object($section)){$section=$this->section_name($section);}if(!is_string($section)){return F;}return isset($this->sections[$section]);}protected function section_name($section){if(is_string($section)){return $section;}if(!is_object($section)||!($section instanceof $this->section_class)||get_class($section)!=$this->section_class){return F;}return $section->name();}public function autolink($bool){$this->autolink=$bool?T:F;}public function propagate($bool){$this->propagate=$bool?T:F;}public function autoload($config='template'){if(!is_array($config)){if(!is_string($config)||!is_array($config=get_config($config))){return F;}}if(isset($config['set_dir'])&&is_string($config['set_dir'])){$this->set_dir($config['set_dir']);}if(isset($config['set_prefix'])&&is_string($config['set_prefix'])){$this->set_prefix($config['set_prefix']);}if(isset($config['create'])&&is_array($config['create'])){$this->create($config['create']);}if(isset($config['group'])&&is_array($config['group'])){foreach($config['group'] as $group_name=>$group_sections){if(is_string($group_name)&&is_array($group_sections)){$this->group($group_name,$group_sections);}}}if(isset($config['add'])&&is_array($config['add'])){foreach($config['add'] as $section_name=>$section_data){if(is_string($section_name)&&$this->section_exists($section_name)&&is_array($section_data)){$this->section($section_name)->add($section_data);}}}if(isset($config['autolink'])&&is_bool($config['autolink'])){$this->autolink($config['autolink']);}if(!$this->autolink&&isset($config['link'])&&is_array($config['link'])){$this->link($config['link']);}return T;}public function create($views){$args=func_get_args();switch(func_num_args()){case 1:if(!is_array($args[0])){if(!is_object($args[0])&&!is_string($args[0])){return;}$args[0]=(array)$args[0];}break;case 2:if(!is_string($args[0])||!is_string($args[1])){return;}$args[0]=array($args[0]=>$args[1]);break;default:return F;break;}foreach($args[0] as $name=>$view){if($this->section_exists($name)){continue;}$name=is_int($name)?$view:$name;if(!$this->is_varname($name)){continue;}if(!$this->view_exists($view)){continue;}$this->sections[$name]=new $this->section_class($name,$view);$this->active=$name;}}public function acreate(){$args=func_get_args();switch(func_num_args()){case 1:if(!is_array($args[0])){if(!is_object($args[0])){return;}$args[0]=(array)$args[0];}break;case 2:if(!is_string($args[0])||!is_string($args[1])){return;}$args[0]=array($args[0]=>$args[1]);break;default:return F;break;}foreach($args[0] as $name=>$content){if(!is_string($name)||!is_string($content)||$this->section_exists($name)||!$this->is_varname($name)){continue;}$this->sections[$name]=new $this->section_class($name,F,$content);}}public function active($section){$section=$this->section_name($section);if(!$this->section_exists($section)){return F;}$this->active=$section;return T;}public function section($section=T){if($section===T&&isset($this->sections[$this->active])){return $this->sections[$this->active];}$section=$this->section_name($section);if(isset($this->sections[$section])){return $this->sections[$section];}return F;}public function link($links){if(!is_array($links)){return;}foreach($links as $section=>$imports){if(!$this->section_exists($section)){continue;}$section=$this->section_name($section);$imports=(array)$imports;if(!isset($this->links[$section])||!is_array($this->links[$section])){$this->links[$section]=array();}foreach($imports as $import){$import=$this->section_name($import);if(!$this->section_exists($import)||in_array($import,$this->links[$section])){continue;}$this->links[$section][]=$import;}}}public function group($name,$sections){if($this->section_exists($name)||!$this->is_varname($name)||!is_array($sections)){return F;}$this->sections[$name]=array();foreach($sections as $section){$section=$this->section_name($section);if($this->section_exists($section)&&is_object($this->section($section))){$this->sections[$name][]=$section;}}return T;}public function agroup($name,$view,$data=array()){if($this->section_exists($name)||!$this->is_varname($name)||!is_array($data)){return F;}if(!$this->view_exists($view)){return F;}$this->sections[$name]=array();foreach($data as $section_data){if(is_object($section_data)){$section_data=(array)$section_data;}if(!is_array($section_data)){continue;}do{$section_hash='_section_'.md5(microtime());}while($this->section_exists($section_hash));$this->create(array($section_hash=>$view));$this->section($section_hash)->add($section_data);$this->sections[$name][]=$section_hash;}return T;}public function join($group,$sections){if(is_string($sections)){$sections=array($sections);}if(!$this->section_exists($group)||!is_array($this->sections[$group])||!is_array($sections)){return F;}foreach($sections as $section){if($this->section_exists($section)){$this->sections[$group][]=$section;}}return T;}public function ajoin($group,$view,$data=array()){if(!isset($this->sections[$group])||!is_array($this->sections[$group])||!is_array($data)||!$this->view_exists($view)){return F;}foreach($data as $section_data){if(is_object($section_data)){$section_data=(array)$section_data;}if(!is_array($section_data)){continue;}do{$section_hash='_section_'.md5(microtime());}while($this->section_exists($section_hash));$this->create(array($section_hash=>$view));$this->section($section_hash)->add($section_data);$this->sections[$group][]=$section_hash;}return T;}protected function combine($section,$limit=1,$data=array()){if(!$this->section_exists($section)||!is_int($limit)||$limit<0||!is_array($data)){return F;}$sections=is_array($this->sections[$section])?$this->sections[$section]:array($this->section($section)->name());if($limit===0){$limit=count($sections);}array_splice($sections,$limit);$render=array();foreach($sections as $section){if(!$this->section_exists($section)||!is_object($this->section($section))){continue;}if($this->autolink){$this->_autolink($section);}$section_data=$this->propagate?$this->section($section)->data($data):array();$content=$this->section($section)->content();if(isset($this->links[$section])&&is_array($this->links[$section])){foreach($this->links[$section] as $link){if(!$this->section_exists($link)){continue;}$regex='/\<\!--\s*\{('.preg_quote($link,'/').')(\[([0-9]+)?\])?\}\s*--\>/';if(preg_match_all($regex,$content,$matches,PREG_SET_ORDER)){foreach($matches as $match){$n=1;if(isset($match[2])){$n=isset($match[3])?(int)$match[3]:0;}$content=str_replace($match[0],$this->combine($link,$n,$section_data),$content);}}}}$render[]=$content;}return implode('',$render);}protected function _autolink($section){if(!$this->section_exists($section)){return F;}$section=$this->section_name($section);$content=$this->section($section)->content();$regex='/\<\!--\s*\{('.$this->valid_name.')(\[([0-9]+)?\])?\}\s*--\>/';if(preg_match_all($regex,$content,$matches,PREG_SET_ORDER)){$links=array();foreach($matches as $match){$links[]=$match[1];}$this->link(array($section=>$links,));}return T;}public function load($section,$return=F){$section=$this->section_name($section);if(!$this->section_exists($section)||!is_object($this->section($section))){return F;}$start=microtime(T);$rendered=$this->combine($section);if(!is_string($rendered)){return F;}if(is_float($start)){$rendered=str_replace('{render_time}',(string)round(microtime(T)-$start,4),$rendered);}if($return){log_message('debug','Template Class Returned Output'.$section);return $rendered;}if(isset($this->CI->output)&&is_object($this->CI->output)&&method_exists($this->CI->output,'append_output')){$this->CI->output->append_output($rendered);}else{echo $rendered;}log_message('debug','Template Class Sent Output: '.$section);return T;}}class Template_Section extends Template_Base{protected $name=F,$data=array(),$view=F,$content=F,$CI;public function __construct($name,$view,$content=F){if(is_string($this->name)){return;}$this->name=$name;if(is_string($view)){$this->view=$view;}else{$this->content=$content;}$this->CI=&get_instance();}public function name(){return $this->name;}public function view(){return $this->view;}public function data($parent_data=F){if(is_array($parent_data)){foreach($parent_data as $varname=>$value){if(!isset($this->data[$varname])&&$this->is_varname($varname)){$this->data[$varname]=$value;}}}return $this->data;}public function content(){$content=is_string($this->view)?$this->CI->load->view($this->view,$this->data,T):$this->content;$content=str_replace(array('{section_name}','{view_name}'),array($this->name,$this->view),$content);return $content;}public function add(){$args=func_get_args();switch(func_num_args()){case 1:if(!is_array($args[0])){if(!is_object($args[0])){return F;}$args[0]=(array)$args[0];}break;case 2:$args[0]=array($args[0]=>$args[1]);break;default:return F;break;}foreach($args[0] as $varname=>$vardata){if(!$this->is_varname($varname)){continue;}$this->data[$varname]=$vardata;}return T;}public function __toString(){return $this->CI->template->load($this->name,T);}public function __invoke(){return call_user_func_array(array($this,'add'),func_get_args());}}